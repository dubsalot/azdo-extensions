# ----------------------------------------------------------------------------------------------
#  This is a work in progress. I am currently learning Github Actions yaml.
#  I'm bringing over the logic from azure-pipelines.yml
# ----------------------------------------------------------------------------------------------
name: Build & Publish AzDo Extension

env:
  EXTENSION_ID: pipelinesoverviewhub
  EXTENSION_NAME: dubsalot pipelines
  EXTENSION_ICON: logo.png
  EXTENSION_PIPELINE_ICON: pipeline-logo.png
  EXTENSION_HUBGROUP_ICON: logo-hub.png
  EXTENSION_PIPELINE_NAME: Pipeline Overview
  NON_PROD_NAME: beta

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ develop, feature/* ]
  #pull_request:
    #branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  init:

    runs-on: ubuntu-latest
    outputs:
      EXTENSION_VERSION: ${{ steps.variables.outputs.extension_version }}
      NON_PROD_NAME: ${{ steps.variables.outputs.non_prod_name }}
      EXTENSION_ID: ${{ steps.variables.outputs.extension_id }}
      EXTENSION_NAME: ${{ steps.variables.outputs.extension_name }}
      EXTENSION_ICON: ${{ steps.variables.outputs.extension_icon }}
      EXTENSION_PIPELINE_ICON: ${{ steps.variables.outputs.extension_pipeline_icon }}
      EXTENSION_PIPELINE_NAME: ${{ steps.variables.outputs.extension_pipeline_name }}
      EXTENSION_HUBGROUP_ICON: ${{ steps.variables.outputs.extension_hubgroup_icon }}     
        
    steps:
      - id: debug_output
        name: display debugging info - variables
        run: | 
          echo "github.action      : ${{ github.action  }}"
          echo "github.action_path : ${{ github.action_path }}"
          echo "github.actor       : ${{ github.actor }}"
          echo "github.base_ref    : ${{ github.base_ref }}"
          echo "github.event       : ${{ github.event }}"
          echo "github.event_name  : ${{ github.event_name }}"
          echo "github.event_path  : ${{ github.event_path }}"
          echo "github.head_ref    : ${{ github.head_ref	 }}"
          echo "github.job         : ${{ github.job }}"          
          echo "github.ref         : ${{ github.ref }}"
          echo "github.sha         : ${{ github.sha }}"
          echo "github.run_number  : ${{ github.run_number }}"
          echo "github.token       : ${{ github.token }}"
          echo "github.workflow    : ${{ github.workflow }}"
          echo "github.workspace   : ${{ github.workspace }}"
      
      - id: set_alpha_if_feature
        if: ${{ startsWith(github.ref, 'refs/heads/feature') }}
        run: |
          echo set environment indicator to ALPHA
          echo "NON_PROD_NAME=alpha" >> $GITHUB_ENV

      - id: set_beta_if_develop
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          echo set environment indicator to BETA
          echo "NON_PROD_NAME=beta" >> $GITHUB_ENV         
        
      - id: variables
        name: set all of the output variables
        if: ${{ github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature') }}
        run: |
          export EXTENSION_ID=$EXTENSION_ID-$NON_PROD_NAME
          export EXTENSION_NAME=$EXTENSION_NAME-$NON_PROD_NAME
          export EXTENSION_ICON=logo-$NON_PROD_NAME.png
          export EXTENSION_PIPELINE_ICON=pipeline-logo-$NON_PROD_NAME.png
          export EXTENSION_PIPELINE_NAME="$EXTENSION_PIPELINE_NAME ($NON_PROD_NAME)"
          export EXTENSION_HUBGROUP_ICON=logo-hub-$NON_PROD_NAME.png

          echo debugging $NON_PROD_NAME
          echo debugging $EXTENSION_ID
          echo debugging $EXTENSION_NAME
          echo debugging $EXTENSION_ICON
          echo debugging $EXTENSION_PIPELINE_ICON
          echo debugging $EXTENSION_PIPELINE_NAME
          echo debugging $EXTENSION_HUBGROUP_ICON

          echo "::set-output name=extension_version::$(date +"%Y.%m.%d").${{ github.run_id }}"
          echo "::set-output name=non_prod_name::$NON_PROD_NAME"
          echo "::set-output name=extension_id::$EXTENSION_ID"
          echo "::set-output name=extension_name::$EXTENSION_NAME"
          echo "::set-output name=extension_icon::$EXTENSION_ICON"
          echo "::set-output name=extension_pipeline_icon::$EXTENSION_PIPELINE_ICON"
          echo "::set-output name=extension_pipeline_name::$EXTENSION_PIPELINE_NAME"
          echo "::set-output name=extension_hubgroup_icon::$EXTENSION_HUBGROUP_ICON"       

  build-manifest:
    runs-on: ubuntu-latest
    name: Tokenize the manifest files
    needs: init  

    steps:
    - uses: actions/checkout@v2

    - id: token_file_1
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '<_'
        tokenSuffix: '_>'
        files: '["**/*-ci.json"]'
      env:
        EXTENSION_ID: ${{ needs.init.outputs.EXTENSION_ID }}
        EXTENSION_NAME: ${{ needs.init.outputs.EXTENSION_NAME }}
        EXTENSION_VERSION: ${{ needs.init.outputs.EXTENSION_VERSION }} 
        EXTENSION_ICON: ${{ needs.init.outputs.EXTENSION_ICON }}
        EXTENSION_PIPELINE_ICON: ${{ needs.init.outputs.EXTENSION_PIPELINE_ICON }}
        EXTENSION_PIPELINE_NAME: ${{ needs.init.outputs.EXTENSION_PIPELINE_NAME }}
        BRANCH_NAME: ${{ github.ref }}
        EXTENSION_HUBGROUP_ICON: ${{ needs.init.outputs.EXTENSION_HUBGROUP_ICON }}
    
    - id: check_files_for_replaced_tokens
      run: |
        echo '======================================================================'
        cat "$GITHUB_WORKSPACE/pipelines/azure-devops-extension-ci.json"
        echo '======================================================================'
        cat "$GITHUB_WORKSPACE/pipelines/src/Hubs/Pipeview/pipeview-ci.json"
        echo '======================================================================'

    - id: publish manifest files
      uses: actions/upload-artifact@v2
        with:
        name: extension-manifest-files
        path: "**/*-ci.json"

    # - id: tokenize_extension_file
    #   uses: ./.github/workflows/token-file
    #   with:
    #     file-path: $GITHUB_WORKSPACE/pipelines/azure-devops-extension-ci.json
    
    # - id: tokenize_hub_file
    #   uses: ./.github/workflows/token-file
    #   with:
    #     file-path: $GITHUB_WORKSPACE/pipelines/src/Hubs/Pipeview/pipeview-ci.json

  build:
    name: "building ${{ needs.init.outputs.EXTENSION_VERSION }}"
    needs: [init, build-manifest]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: see what the variables are
        run: |
          echo EXTENSION_VERSION "${{ needs.init.outputs.EXTENSION_VERSION }}"
          echo NON_PROD_NAME "${{ needs.init.outputs.NON_PROD_NAME }}"
          echo EXTENSION_ID "${{ needs.init.outputs.EXTENSION_ID }}"
          echo EXTENSION_NAME "${{ needs.init.outputs.EXTENSION_NAME }}"
          echo EXTENSION_ICON "${{ needs.init.outputs.EXTENSION_ICON }}"
          echo EXTENSION_PIPELINE_ICON "${{ needs.init.outputs.EXTENSION_PIPELINE_ICON }}"
          echo EXTENSION_PIPELINE_NAME "${{ needs.init.outputs.EXTENSION_PIPELINE_NAME }}"
          echo EXTENSION_HUBGROUP_ICON "${{ needs.init.outputs.EXTENSION_HUBGROUP_ICON }}"
      
      - name: see where we are and what's in here
        run: |
          echo $GITHUB_WORKSPACE
          pwd
          ls -alF
          ls -alF $GITHUB_WORKSPACE

  build_two:
    name: "see what UI looks like"
    needs: [init, build-manifest]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: see where we are and what's in here
        run: |
          echo $GITHUB_WORKSPACE
          pwd
          ls -alF
          ls -alF $GITHUB_WORKSPACE
  
  build_three:
    name: "see what UI looks like part 2"
    needs: [init, build_two]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: see where we are and what's in here
        run: |
          echo $GITHUB_WORKSPACE
          pwd
          ls -alF
          ls -alF $GITHUB_WORKSPACE                        

#give me some more whitespace
