# ----------------------------------------------------------------------------------------------
#  This is a work in progress. I am currently learning Github Actions yaml.
#  I'm bringing over the logic from azure-pipelines.yml
# ----------------------------------------------------------------------------------------------
name: Build & Publish AzDo Extension

env:
  EXTENSION_ID: pipelinesoverviewhub
  EXTENSION_NAME: dubsalot pipelines
  EXTENSION_ICON: logo.png
  EXTENSION_PIPELINE_ICON: pipeline-logo.png
  EXTENSION_HUBGROUP_ICON: logo-hub.png
  EXTENSION_PIPELINE_NAME: Pipeline Overview
on:
  push:
    branches: [ develop, feature/* ]
  #pull_request:
    #branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  init:

    runs-on: ubuntu-latest
    outputs:
      EXTENSION_VERSION: ${{ steps.variables.outputs.extension_version }}
      EXTENSION_ID: ${{ steps.variables.outputs.extension_id }}
      EXTENSION_NAME: ${{ steps.variables.outputs.extension_name }}
      EXTENSION_ICON: ${{ steps.variables.outputs.extension_icon }}
      EXTENSION_PIPELINE_ICON: ${{ steps.variables.outputs.extension_pipeline_icon }}
      EXTENSION_PIPELINE_NAME: ${{ steps.variables.outputs.extension_pipeline_name }}
      EXTENSION_HUBGROUP_ICON: ${{ steps.variables.outputs.extension_hubgroup_icon }}     
        
    steps:
      - id: debug_output
        name: display debugging info - variables
        run: | 
          echo "github.action      : ${{ github.action  }}"
          echo "github.action_path : ${{ github.action_path }}"
          echo "github.actor       : ${{ github.actor }}"
          echo "github.base_ref    : ${{ github.base_ref }}"
          echo "github.event       : ${{ github.event }}"
          echo "github.event_name  : ${{ github.event_name }}"
          echo "github.event_path  : ${{ github.event_path }}"
          echo "github.head_ref    : ${{ github.head_ref	 }}"
          echo "github.job         : ${{ github.job }}"          
          echo "github.ref         : ${{ github.ref }}"
          echo "github.sha         : ${{ github.sha }}"
          echo "github.run_number  : ${{ github.run_number }}"
          echo "github.token       : ${{ github.token }}"
          echo "github.workflow    : ${{ github.workflow }}"
          echo "github.workspace   : ${{ github.workspace }}"
      
      - id: set_alpha_if_not_dev_and_not_main
        name: set extension environment indicator to alpha
        if: ${{ github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/main' }}
        run: |
          echo set environment indicator to ALPHA
          echo "EXTENSION_ID=$EXTENSION_ID-alpha" >> $GITHUB_ENV
          echo "EXTENSION_NAME=$EXTENSION_NAME-alpha" >> $GITHUB_ENV
          echo "EXTENSION_ICON=logo-alpha.png" >> $GITHUB_ENV
          echo "EXTENSION_PIPELINE_ICON=pipeline-logo-alpha.png" >> $GITHUB_ENV
          echo "EXTENSION_PIPELINE_NAME=$EXTENSION_PIPELINE_NAME ALPHA" >> $GITHUB_ENV
          echo "EXTENSION_HUBGROUP_ICON=logo-hub-alpha.png" >> $GITHUB_ENV
          echo "THIS IS AN ALPHA"

      - id: set_beta_if_develop
        name: set extension environment indicator to beta
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          echo set environment indicator to BETA 1
          echo "EXTENSION_ID=$EXTENSION_ID-beta" >> $GITHUB_ENV
          echo set environment indicator to BETA 2
          echo "EXTENSION_NAME=$EXTENSION_NAME-beta" >> $GITHUB_ENV
          echo set environment indicator to BETA 3
          echo "EXTENSION_ICON=logo-beta.png" >> $GITHUB_ENV
          echo set environment indicator to BETA 4
          echo "EXTENSION_PIPELINE_ICON=pipeline-logo-beta.png" >> $GITHUB_ENV
          echo set environment indicator to BETA 5
          echo "EXTENSION_PIPELINE_NAME=$EXTENSION_PIPELINE_NAME BETA" >> $GITHUB_ENV
          echo set environment indicator to BETA 6
          echo "EXTENSION_HUBGROUP_ICON=logo-hub-beta.png" >> $GITHUB_ENV
          echo set environment indicator to BETA 7

      - id: variables
        name: set all variables
        if: ${{ github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature') }}
        run: |
          echo "::set-output name=extension_version::$(date +"%Y.%-m.%-d").${{ github.run_id }}"
          echo "::set-output name=extension_id::$EXTENSION_ID"
          echo "::set-output name=extension_name::$EXTENSION_NAME"
          echo "::set-output name=extension_icon::$EXTENSION_ICON"
          echo "::set-output name=extension_pipeline_icon::$EXTENSION_PIPELINE_ICON"
          echo "::set-output name=extension_pipeline_name::$EXTENSION_PIPELINE_NAME"
          echo "::set-output name=extension_hubgroup_icon::$EXTENSION_HUBGROUP_ICON"       

  build-manifest:
    runs-on: ubuntu-latest
    name: Tokenize the manifest files
    needs: init  

    steps:
    - uses: actions/checkout@v2

    - id: replace_tokens_in_manifest_files
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '<_'
        tokenSuffix: '_>'
        files: '["**/*-ci.json"]'
      env:
        EXTENSION_ID: ${{ needs.init.outputs.EXTENSION_ID }}
        EXTENSION_NAME: ${{ needs.init.outputs.EXTENSION_NAME }}
        EXTENSION_VERSION: ${{ needs.init.outputs.EXTENSION_VERSION }} 
        EXTENSION_ICON: ${{ needs.init.outputs.EXTENSION_ICON }}
        EXTENSION_PIPELINE_ICON: ${{ needs.init.outputs.EXTENSION_PIPELINE_ICON }}
        EXTENSION_PIPELINE_NAME: ${{ needs.init.outputs.EXTENSION_PIPELINE_NAME }}
        BRANCH_NAME: ${{ github.ref }}
        EXTENSION_HUBGROUP_ICON: ${{ needs.init.outputs.EXTENSION_HUBGROUP_ICON }}

    - id: publish-manifest-files
      uses: actions/upload-artifact@v2
      with:
        name: extension-manifest-files
        path: "**/*-ci.json"

  build-vsix:
    name: "Build VSIX ${{ needs.init.outputs.EXTENSION_VERSION }}"
    needs: [init, build-manifest]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download manifest files
        uses: actions/download-artifact@v2
        with:
          name: extension-manifest-files      
      
      #TODO: this takes a long time. create a docker image based on ubuntu-latest that already has it installed
      - name: Install tfx-cli utility
        run: |
          cd pipelines
          npm install
          sudo npm install -g tfx-cli

      - name: Clean up dist folder just in case
        run: |
          cd pipelines
          rm -rf dist
          rm -f *.vsix

      - name: Run webpack
        run: |
          cd pipelines
          webpack --mode production --env.useFakes=false
          tfx extension create --manifest-globs azure-devops-extension-ci.json src/Hubs/**/*-ci.json

      - id: publish-vsix-files
        name: Publish any VSIX files that were created
        uses: actions/upload-artifact@v2
        with:
          name: extension-vsix-files
          path: "**/*.vsix"        

  publish:
    env:
      PUBLISHER_TOKEN: ${{ secrets.PUBLISHER_TOKEN }}
    name: "publish to the market place"
    needs: [build-vsix]
    runs-on: ubuntu-latest

    steps:
      - name: Download visx files
        uses: actions/download-artifact@v2
        with:
          name: extension-vsix-files

      #TODO: this takes a long time. create a docker image based on ubuntu-latest that already has it installed
      - name: Install tfx-cli utility
        run: |
          cd pipelines
          sudo npm install -g tfx-cli          

      - name: Publish Token to Marketplace
        run: |
          cd pipelines
          tfx extension publish --vsix *.vsix --service-url https://marketplace.visualstudio.com/ --auth-type pat --token $PUBLISHER_TOKEN --share-with dubsalot
          status=$?
       



#give me some more whitespace



